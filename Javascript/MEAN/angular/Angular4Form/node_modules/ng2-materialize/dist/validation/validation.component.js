import { Component, ComponentFactoryResolver, ElementRef, HostBinding, HostListener, Input, Renderer, ViewContainerRef, ViewEncapsulation, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { MzErrorMessageComponent } from './error-message';
var MzValidationComponent = (function () {
    function MzValidationComponent(ngControl, elementRef, renderer, resolver, viewContainerRef) {
        this.ngControl = ngControl;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.resolver = resolver;
        this.viewContainerRef = viewContainerRef;
        this._disabled = false;
        this._disablingState = false;
        this._enablingState = false;
        this._formControlDisabled = false;
        this._required = false;
        this.errorMessageComponent = null;
    }
    Object.defineProperty(MzValidationComponent.prototype, "required", {
        get: function () { return this._required; },
        set: function (value) { this._required = (value != null && "" + value !== 'false'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MzValidationComponent.prototype, "formControlDisabled", {
        get: function () { return this._formControlDisabled; },
        set: function (value) {
            this._formControlDisabled = value;
            if (this._formControlDisabled) {
                this.ngControl.control.disable();
            }
            else {
                this.ngControl.control.enable();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MzValidationComponent.prototype, "elementToAddValidation", {
        get: function () {
            return this.isNativeSelectElement
                ? this.inputSelectDropdown
                : this.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MzValidationComponent.prototype, "inputSelectDropdown", {
        get: function () {
            return this.nativeElement.siblings('input.select-dropdown');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MzValidationComponent.prototype, "isNativeSelectElement", {
        get: function () {
            return this.nativeElement[0].nodeName === 'SELECT';
        },
        enumerable: true,
        configurable: true
    });
    MzValidationComponent.prototype.onFocusOut = function (target) {
        this.ngControl.control.markAsTouched();
        this.setValidationState();
    };
    MzValidationComponent.prototype.ngAfterViewInit = function () {
        this.initElements();
        this.initErrorMessageComponent();
        this.subscribeStatusChanges();
    };
    MzValidationComponent.prototype.ngOnDestroy = function () {
        this.statusChangesSubscription.unsubscribe();
        this.errorMessageComponent.destroy();
        this.inputSelectDropdown.off('blur');
    };
    MzValidationComponent.prototype.clearValidationState = function (element) {
        this.renderer.setElementClass(element[0], 'valid', false);
        this.renderer.setElementClass(element[0], 'invalid', false);
    };
    MzValidationComponent.prototype.createRequiredSpanElement = function () {
        if (this.required && this.labelElement) {
            var spanElement = document.createElement('span');
            spanElement.setAttribute('class', 'placeholder-required');
            spanElement.textContent = ' *';
            this.renderer.invokeElementMethod(this.labelElement, 'appendChild', [spanElement]);
        }
    };
    MzValidationComponent.prototype.initElements = function () {
        this.labelElement = $('label[for=' + this.id + ']')[0];
        this.nativeElement = $(this.elementRef.nativeElement);
        if (this.isNativeSelectElement) {
            this.initNativeSelectElement();
        }
        this.createRequiredSpanElement();
    };
    MzValidationComponent.prototype.initErrorMessageComponent = function () {
        var errorMessageFactory = this.resolver.resolveComponentFactory(MzErrorMessageComponent);
        this.errorMessageComponent = this.viewContainerRef.createComponent(errorMessageFactory);
        this.errorMessageComponent.instance.errorMessageResource = this.errorMessageResource;
        this.errorMessageComponent.instance.control = this.ngControl.control;
        this.errorMessageComponent.changeDetectorRef.detectChanges();
        var errorMessage = this.nativeElement.parent().children('mz-error-message');
        this.renderer.invokeElementMethod(errorMessage, 'insertAfter', [this.labelElement]);
    };
    MzValidationComponent.prototype.initNativeSelectElement = function () {
        var _this = this;
        // Wait for materialize_select function to be executed when the element has mz-select directive.
        setTimeout(function () {
            _this.inputSelectDropdown.on('blur', function () {
                _this.ngControl.control.markAsTouched();
                _this.setValidationState();
            });
        });
    };
    MzValidationComponent.prototype.setValidationState = function () {
        // to disable field
        if (this._disablingState) {
            this.updateSelect();
            this.clearValidationState(this.elementToAddValidation);
            this._disablingState = false;
            return;
        }
        // to enable field
        if (this._enablingState) {
            this.updateSelect();
            this._enablingState = false;
        }
        // to reset form
        if (this.ngControl.control.untouched && this.ngControl.control.pristine) {
            this.updateSelect();
            this.clearValidationState(this.elementToAddValidation);
            return;
        }
        // to handle field validity
        if (this.ngControl.control.enabled) {
            if (this.ngControl.control.valid) {
                this.renderer.setElementClass(this.elementToAddValidation[0], 'valid', true);
                this.renderer.setElementClass(this.elementToAddValidation[0], 'invalid', false);
            }
            else {
                this.renderer.setElementClass(this.elementToAddValidation[0], 'valid', false);
                this.renderer.setElementClass(this.elementToAddValidation[0], 'invalid', true);
            }
        }
    };
    MzValidationComponent.prototype.subscribeStatusChanges = function () {
        var _this = this;
        this._disabled = this.ngControl.control.disabled;
        this.statusChangesSubscription = this.ngControl.control.statusChanges.subscribe(function (status) {
            var disabled = status === 'DISABLED';
            if (disabled !== _this._disabled) {
                _this._disablingState = disabled;
                _this._enablingState = !disabled;
            }
            _this._disabled = disabled;
            // TODO Find a better way to handle validation after the form subscription. (see demo-app form-validation)
            // Wait for the valueChanges method from FormGroup to have been triggered before handling the validation state.
            // /!\ Race condition warning /!\
            setTimeout(function () { return _this.setValidationState(); });
        });
    };
    MzValidationComponent.prototype.updateSelect = function () {
        if (this.isNativeSelectElement) {
            this.renderer.invokeElementMethod(this.nativeElement, 'material_select');
            this.initNativeSelectElement();
        }
    };
    return MzValidationComponent;
}());
export { MzValidationComponent };
MzValidationComponent.decorators = [
    { type: Component, args: [{
                encapsulation: ViewEncapsulation.None,
                selector: 'mz-validation, [mz-validation], [mzValidation]',
                template: "<ng-content></ng-content>",
                styles: [".select-wrapper input.select-dropdown.invalid,textarea.ng-invalid.ng-touched:focus{border-bottom:1px solid #f44336;box-shadow:0 1px 0 0 #f44336}.select-wrapper input.select-dropdown.valid{border-bottom:1px solid #4caf50;box-shadow:0 1px 0 0 #4caf50}input:not([type=checkbox]):focus+label.active span.placeholder-required,textarea:focus+label.active span.placeholder-required{color:#f44336}"],
            },] },
];
/** @nocollapse */
MzValidationComponent.ctorParameters = function () { return [
    { type: NgControl, },
    { type: ElementRef, },
    { type: Renderer, },
    { type: ComponentFactoryResolver, },
    { type: ViewContainerRef, },
]; };
MzValidationComponent.propDecorators = {
    'id': [{ type: Input },],
    'required': [{ type: HostBinding, args: ['attr.required',] }, { type: Input },],
    'errorMessageResource': [{ type: Input },],
    'formControlDisabled': [{ type: Input },],
    'onFocusOut': [{ type: HostListener, args: ['focusout', ['$event.target'],] },],
};
