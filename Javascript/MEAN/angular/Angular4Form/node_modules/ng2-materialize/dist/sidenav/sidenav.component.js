import { Component, Input, Renderer, ViewChild } from '@angular/core';
var MzSidenavComponent = (function () {
    function MzSidenavComponent(renderer) {
        this.renderer = renderer;
    }
    MzSidenavComponent.prototype.ngOnInit = function () {
        this.closeOnClickListeners = [];
    };
    MzSidenavComponent.prototype.ngAfterViewInit = function () {
        this.initCollapseButton();
        this.initCollapsibleLinks();
        this.fixCloseOnClick();
    };
    MzSidenavComponent.prototype.ngOnDestroy = function () {
        $("#" + this.collapseButtonId).sideNav('destroy');
        this.closeOnClickListeners.forEach(function (listener) { return listener(); });
    };
    MzSidenavComponent.prototype.initCollapseButton = function () {
        if (!this.collapseButtonId) {
            return;
        }
        var collapseButton = $("#" + this.collapseButtonId)[0];
        // Make collapse button visible on all resolution if side navigation is not fixed
        if (!this.fixed) {
            this.renderer.setElementClass(collapseButton, 'show-on-large', true);
        }
        // Add data-activates to collapse button
        this.renderer.setElementAttribute(collapseButton, 'data-activates', this.id);
        // Initialize collapsible button for side navigation
        $(collapseButton).sideNav({
            closeOnClick: this.closeOnClick || false,
            edge: this.edge || 'left',
            menuWidth: isNaN(this.width) ? 300 : this.width,
        });
    };
    MzSidenavComponent.prototype.initCollapsibleLinks = function () {
        // Initialize collapsible elements
        $('.collapsible').collapsible();
    };
    MzSidenavComponent.prototype.fixCloseOnClick = function () {
        var _this = this;
        // Fix side navigation closeOnClick for non-collapsible links
        // issue: https://github.com/Dogfalo/materialize/issues/2520
        // workaround: https://github.com/Dogfalo/materialize/issues/1426
        $(this.sideNav.nativeElement)
            .find('li a:not(.collapsible-header)')
            .each(function (index, link) {
            var listener = _this.renderer.listen(link, 'click', function (element) {
                if ($(window).width() < 992) {
                    $("#" + _this.collapseButtonId).sideNav('hide');
                }
            });
            _this.closeOnClickListeners.push(listener);
        });
    };
    return MzSidenavComponent;
}());
export { MzSidenavComponent };
MzSidenavComponent.decorators = [
    { type: Component, args: [{
                selector: 'mz-sidenav',
                template: "<ul #sidenav class=\"side-nav {{ backgroundClass }}\" [attr.id]=\"id\" [class.fixed]=\"fixed\"><ng-content></ng-content></ul>",
            },] },
];
/** @nocollapse */
MzSidenavComponent.ctorParameters = function () { return [
    { type: Renderer, },
]; };
MzSidenavComponent.propDecorators = {
    'backgroundClass': [{ type: Input },],
    'closeOnClick': [{ type: Input },],
    'collapseButtonId': [{ type: Input },],
    'edge': [{ type: Input },],
    'fixed': [{ type: Input },],
    'id': [{ type: Input },],
    'width': [{ type: Input },],
    'sideNav': [{ type: ViewChild, args: ['sidenav',] },],
};
